var font
var inited = false
var enabled = false
var focused = false
const indicators = []
var inputbuf = ""

var indicatorIdx = -1
var textRegionWidth = 20

import math

function newIndicator(fn, min=0, max=0)
{
    // Get idx
    indicatorIdx++
    // Init
    const pad = 8
    const height = 13
    const yoffset = pad + height * indicatorIdx
    // Return draw function
    return function()
    {
        const txt, val = fn()
        // Draw text
        micro.gfx.setFont(font)
        micro.gfx.print(txt, pad, yoffset)
        micro.gfx.setFont()
    }
}

function micro.debug._event(e)
{
    // Handle console's keyboard input
    if e['type'] == "keydown" and enabled and focused
    {
        if e['key'] == "backspace"
        {
            inputbuf = inputbuf[0:-1]
        }
        else if e['key'] == "enter"
        {
            const fn = loadstring(inputbuf, "=<input>")
            fn()
            inputbuf = ""
        }
    }
    else if e['type'] == "textinput" and enabled and focused
    {
        inputbuf += e['text']
    }
}

function micro.debug.draw()
{
    // Not enabled? Don't draw
    if not enabled { return }
    // Draw indicators
    for const v in indicators
    {
        v()
    }

    // Draw console input text
    var w = 300
    if focused
    {
        var h = font.getHeight()
        var y = micro.gfx.screen.getHeight() - 8 - h
        var caret = (micro.timer.getTime() % 0.6 < 0.3) and "_" or ""
        w = math.max(w, font.getWidth(inputbuf + "_"))
        micro.gfx.print(inputbuf + caret, 8, y)
    }
}

function init()
{
    // Init font
    font = micro.Font.fromEmbedded(8)
    // Init indicators
    micro.debug.addIndicator(function() {
        const r = micro.timer.getFps()
        return ["${r} fps", r]
    })
    micro.debug.addIndicator(function() {
        const r = gc()
        return ["%.2f mb".format(r / 1024), r]
    })
    // Set init flag
    inited = true
}

function micro.debug.setVisible(x)
{
    enabled = x and true or false
    if enabled and not inited
    {
        init()
    }
}

function micro.debug.getVisible()
{
    return enabled
}

function micro.debug.setFocused(x)
{
    focused = x and true or false
}

function micro.debug.getFocused()
{
    return focused
}

function micro.debug.addIndicator(fn, min=0, max=0)
{
    // Error check
    const str, num = fn()
    if typeof(str) != "string" or typeof(num) != "number"
    {
        error("expected indicator function to return string and number")
    }
    if min and typeof(min) != "number"
    {
        error("expected `min` to be a number")
    }
    if max and typeof(max) != "number"
    {
        error("expected `max` to be a number")
    }
    // Create, add and return
    const indicator = newIndicator(fn, min, max)
    indicators.add(indicator)
    return indicator
}

function micro.debug.removeIndicator(indicator)
{
    for var i = 0; i < indicators.len; i++
    {
        const v = indicators[i]
        if v == indicator
        {
            indicators.delete(i)
            return
        }
    }
}